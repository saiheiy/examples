// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXAMPLES_EXAMPLES_H_
#define FLATBUFFERS_GENERATED_EXAMPLES_EXAMPLES_H_

#include "flatbuffers/flatbuffers.h"

namespace Examples {

struct Position;

struct Position FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_QTY = 4,
    VT_NAME = 6,
    VT_ACCOUNTID = 8
  };
  int32_t qty() const {
    return GetField<int32_t>(VT_QTY, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint64_t accountId() const {
    return GetField<uint64_t>(VT_ACCOUNTID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_QTY) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint64_t>(verifier, VT_ACCOUNTID) &&
           verifier.EndTable();
  }
};

struct PositionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_qty(int32_t qty) {
    fbb_.AddElement<int32_t>(Position::VT_QTY, qty, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Position::VT_NAME, name);
  }
  void add_accountId(uint64_t accountId) {
    fbb_.AddElement<uint64_t>(Position::VT_ACCOUNTID, accountId, 0);
  }
  PositionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PositionBuilder &operator=(const PositionBuilder &);
  flatbuffers::Offset<Position> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Position>(end);
    return o;
  }
};

inline flatbuffers::Offset<Position> CreatePosition(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t qty = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t accountId = 0) {
  PositionBuilder builder_(_fbb);
  builder_.add_accountId(accountId);
  builder_.add_name(name);
  builder_.add_qty(qty);
  return builder_.Finish();
}

inline flatbuffers::Offset<Position> CreatePositionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t qty = 0,
    const char *name = nullptr,
    uint64_t accountId = 0) {
  return Examples::CreatePosition(
      _fbb,
      qty,
      name ? _fbb.CreateString(name) : 0,
      accountId);
}

inline const Examples::Position *GetPosition(const void *buf) {
  return flatbuffers::GetRoot<Examples::Position>(buf);
}

inline bool VerifyPositionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Examples::Position>(nullptr);
}

inline void FinishPositionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Examples::Position> root) {
  fbb.Finish(root);
}

}  // namespace Examples

#endif  // FLATBUFFERS_GENERATED_EXAMPLES_EXAMPLES_H_
